// This is your Prisma schema file,
// learn more about it in the docs: [https://pris.ly/d/prisma-schema](https://pris.ly/d/prisma-schema)

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: [https://pris.ly/cli/accelerate-init](https://pris.ly/cli/accelerate-init)

generator client {
provider = "prisma-client-js"
}

datasource db {
provider = "mysql"
url      = env("DATABASE_URL")
}

enum Rol {
Admin
Cliente
}

model Usuario {
id         Int               @id @default(autoincrement())
nombre     String
email      String            @unique
contrasena String
telefono   String
tarjetas   String
direccion  Direccion[]       // Relación 1\:N con Direccion
pedidos    Pedido[]          // Relación 1\:N con Pedido
rol        Rol               // Atributo 'rol' con tipo enum
visitas    HistorialVisita[] // Relación 1\:N con HistorialVisita
}

model Direccion {
id                Int        @id @default(autoincrement())
comuna            String
region            String
numero            Int
calle             String
usuarioId         Int
usuario           Usuario    @relation(fields: [usuarioId], references: [id])  // Relación N:1 con Usuario
pedidos           Pedido[]   // Relación 1\:N con Pedido
}

enum PedidoEstado {
PENDIENTE
ACTIVO
COMPLETADO
CANCELADO
}

model Pedido {
id             Int              @id @default(autoincrement())
fechaPedido    DateTime
estado         PedidoEstado     // ← Usar enum para el estado del pedido
total          Float            // ← Nuevo campo para el total del pedido
usuarioId      Int
direccionId    Int
usuario        Usuario          @relation(fields: [usuarioId], references: [id])  // Relación N:1 con Usuario
direccion      Direccion        @relation(fields: [direccionId], references: [id]) // Relación N:1 con Direccion
lineasDePedido LineaDePedido[]  // Relación 1\:N con LineaDePedido
}

model LineaDePedido {
id             Int       @id @default(autoincrement())
cantidad       Int
precioUnitario Float
total          Float
productoId     Int
pedidoId       Int
producto       Producto  @relation(fields: [productoId], references: [id])  // Relación N:1 con Producto
pedido         Pedido    @relation(fields: [pedidoId], references: [id])    // Relación N:1 con Pedido
}

enum ProductoEstado {
ACTIVO
ELIMINADO
INACTIVO
}

model Producto {
id             Int                @id @default(autoincrement())
nombre         String
descripcion    String
precio         Float
categoriaId    Int
ofertaId       Int?               // ← campo para almacenar la relación con Oferta
imagenUrl      String?            // ← nueva columna
estado         ProductoEstado     // ← usar enum para el estado
categoria      Categoria          @relation(fields: [categoriaId], references: [id])  // Relación N:1 con Categoria
oferta         Oferta?            @relation(fields: [ofertaId], references: [id])     // Relación 1\:N con Oferta
sucursales     ProductoSucursal[] // Relación 1\:N con ProductoSucursal
lineasDePedido LineaDePedido[]    // Relación 1\:N con LineaDePedido
visitas        HistorialVisita[]   // Relación 1\:N con HistorialVisita
}

model Categoria {
id         Int         @id @default(autoincrement())
nombre     String
estado     String
productos  Producto[]  // Relación 1\:N con Producto
}

model Oferta {
id          Int        @id @default(autoincrement())
porcentaje  Float
descripcion String
fechaInicio DateTime
fechaFin    DateTime
estado      String
productos   Producto[] // Relación 1\:N con Producto
}

model Sucursal {
id         Int                @id @default(autoincrement())
nombre     String
direccion  String
ciudad     String
region     String
productos  ProductoSucursal[] // Relación 1\:N con ProductoSucursal
}

model ProductoSucursal {
productoId Int
sucursalId Int
stock      Int                // El stock específico de este producto en esta sucursal

producto   Producto           @relation(fields: [productoId], references: [id])
sucursal   Sucursal           @relation(fields: [sucursalId], references: [id])

@@id([productoId, sucursalId]) // Clave primaria compuesta para evitar duplicados
}

/// Nuevo modelo para registrar visitas de usuarios a productos
model HistorialVisita {
id         Int       @id @default(autoincrement())
usuarioId  Int
productoId Int
fecha      DateTime  @default(now())

usuario    Usuario   @relation(fields: [usuarioId], references: [id])
producto   Producto  @relation(fields: [productoId], references: [id])

@@unique([usuarioId, productoId]) // Evita registros duplicados
}
